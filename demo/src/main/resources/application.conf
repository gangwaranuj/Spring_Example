base_kafka = {
  enabled: true
  nodeName: localhost // node name
  server {
    host: 127.0.0.1 // SmartStack proxy IP
    port: 9092
    // for overrides by /etc/wm/base.conf
    host: ${?kafka.host}
    port: ${?kafka.port}
  }
  producer { // Kafka specific configurations http://kafka.apache.org/documentation.html#newproducerconfigs
    "acks": 0
    "request.timeout.ms": 500 // this should be equal to the one set in hystrix
    "key.serializer": org.apache.kafka.common.serialization.StringSerializer
    "value.serializer": org.apache.kafka.common.serialization.StringSerializer
  }
  compression = "gzip"
}

metrics {
  enabled: true
  convertRatesTo: SECONDS
  convertDurationsTo: MILLISECONDS
  reportingIntervalMillis: 10000

  kafka = ${base_kafka}
  kafka.producer {
    "client.id": "metrics"
  }
}

// Application Kafka Client
app_kafka = ${base_kafka}
app_kafka.producer {
  "acks": -1
  "client.id": "app"
}

solr_kafka = ${base_kafka}
solr_kafka.producer {
  "client.id": "solr"
}

// Temporary Indexing Consumer (while Indexing Service is WIP)
indexing_kafka = {
  enabled: false
  autoCommit: true
  bootstrapServers: ${base_kafka.server.host}":"${base_kafka.server.port}
  keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer
  valueDeserializer: org.apache.kafka.common.serialization.StringDeserializer
  consumerGroup: index_request_consumer
  sessionTimeoutMs: 6000
  autoCommitIntervalMs: 1000
  topics: [
    {
      name: index_user_request
    }
    {
      name: index_work_request
    }
    {
      name: index_company_request
    }
    {
      name: index_group_request
    }
    {
      name: org-membership-update
    }
  ]
}

aftership {
  url = "https://api.aftership.com/v4"
  key = "talk to ops or drew to get things into /etc/wm/application-credentials.conf"
}
