package com.workmarket.domains.groups.model;

import com.google.common.collect.Sets;
import com.workmarket.domains.model.Company;
import com.workmarket.domains.model.DeletableEntity;
import com.workmarket.domains.model.Industry;
import com.workmarket.domains.model.ObjectiveType;
import com.workmarket.domains.model.User;
import com.workmarket.domains.model.datetime.TimeZone;
import com.workmarket.domains.model.network.UserGroupNetworkAssociation;
import com.workmarket.domains.model.request.UserGroupInvitation;
import com.workmarket.domains.model.requirementset.RequirementSet;
import com.workmarket.domains.model.requirementset.RequirementSetable;
import com.workmarket.domains.model.summary.group.UserGroupSummary;
import com.workmarket.domains.model.tag.Tag;
import com.workmarket.dto.UserGroupDTO;
import com.workmarket.domains.model.audit.AuditChanges;
import com.workmarket.utility.BeanUtilities;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Set;

@Entity(name = "userGroup")
@Table(name = "user_group")
@NamedQueries({
	@NamedQuery(name = "group.findUserGroupByName", query = "select g from userGroup g where g.name = :name"),
	@NamedQuery(name = "group.findUserGroupsByNetwork", query="select g from userGroup g join fetch g.userGroupNetworkAssociations ugna where ugna.network.id = :networkId and ugna.active = true and ugna.deleted = false")
})
@AuditChanges
public class UserGroup extends DeletableEntity implements RequirementSetable {

	private static final long serialVersionUID = 1L;

	private String name;
	private String description;
	private Industry industry;
	private ObjectiveType objectiveType;
	private String objective;
	private Set<Tag> tags = Sets.newLinkedHashSet();
	private Company company;

	@NotNull
	private Boolean openMembership = Boolean.FALSE;
	private Boolean requiresApproval = Boolean.TRUE;
	private boolean searchable;
	private boolean isPublic = false;

	private Calendar userAssociationsValidatedOn;
	private boolean validationRequired = false;
	private boolean paymentTermsRequired = false;

	@NotNull
	private Boolean activeFlag = Boolean.TRUE;
	private Boolean autoGenerated = Boolean.FALSE;

	private User owner;
	private Set<UserUserGroupAssociation> userAssociations = Sets.newLinkedHashSet();
	private Set<UserGroupInvitation> invitations = Sets.newLinkedHashSet();
	private UserGroupSummary userGroupSummary;
	private Set<UserGroupNetworkAssociation> userGroupNetworkAssociations = Sets.newLinkedHashSet();

	private RequirementSet requirementSet;
	private String uuid;

	public UserGroup() {}

	@OneToMany(fetch = FetchType.LAZY)
	@JoinColumn(name="user_group_id")
	public Set<UserGroupNetworkAssociation> getUserGroupNetworkAssociations() {
		return userGroupNetworkAssociations;
	}

	public void setUserGroupNetworkAssociations(Set<UserGroupNetworkAssociation> userGroupNetworkAssociations) {
		this.userGroupNetworkAssociations = userGroupNetworkAssociations;
	}

	@OneToOne(mappedBy = "userGroup")
	public UserGroupSummary getUserGroupSummary() {
		return this.userGroupSummary;
	}

	public void setUserGroupSummary(UserGroupSummary userGroupSummary) {
		this.userGroupSummary = userGroupSummary;
	}

	@Column(name = "name", nullable = false, length = 200)
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "description", nullable = false, length = 5000)
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Fetch(FetchMode.JOIN)
	@ManyToOne
	@JoinColumn(name = "industry_id")
	public Industry getIndustry() {
		return industry;
	}

	public void setIndustry(Industry industry) {
		this.industry = industry;
	}

	@Column(name = "open_membership", nullable = false)
	public Boolean getOpenMembership() {
		return openMembership;
	}

	public void setOpenMembership(Boolean openMembership) {
		this.openMembership = openMembership;
	}

	@Column(name = "requires_approval")
	public Boolean getRequiresApproval() {
		return requiresApproval;
	}

	public void setRequiresApproval(Boolean requiresApproval) {
		this.requiresApproval = requiresApproval;
	}

	@Column(name = "auto_generated")
	public Boolean isAutoGenerated() {
		return autoGenerated;
	}

	public void setAutoGenerated(Boolean autoGenerated) {
		this.autoGenerated = autoGenerated;
	}

	@ManyToOne(cascade = {}, fetch = FetchType.LAZY, optional = false)
	@JoinColumn(name = "owner_id", updatable = true)
	public User getOwner() {
		return owner;
	}

	public void setOwner(User owner) {
		this.owner = owner;
	}

	@OneToMany(mappedBy = "userGroup", fetch = FetchType.LAZY, cascade = {})
	public Set<UserUserGroupAssociation> getUserAssociations() {
		return userAssociations;
	}

	public void setUserAssociations(Set<UserUserGroupAssociation> userAssociations) {
		this.userAssociations = userAssociations;
	}

	@OneToMany(mappedBy = "userGroup", fetch = FetchType.LAZY, cascade = {})
	public Set<UserGroupInvitation> getInvitations() {
		return invitations;
	}

	public void setInvitations(Set<UserGroupInvitation> invitations) {
		this.invitations = invitations;
	}

	@Column(name = "active_flag")
	public Boolean getActiveFlag() {
		return activeFlag;
	}

	public void setActiveFlag(Boolean activeFlag) {
		this.activeFlag = activeFlag;
	}

	@Column(name = "validated_on")
	public Calendar getUserAssociationsValidatedOn() {
		return userAssociationsValidatedOn;
	}

	public void setUserAssociationsValidatedOn(
			Calendar userAssociationsValidatedOn) {
		this.userAssociationsValidatedOn = userAssociationsValidatedOn;
	}

	@Column(name = "validation_required")
	public boolean isValidationRequired() {
		return validationRequired;
	}

	public void setValidationRequired(boolean validationRequired) {
		this.validationRequired = validationRequired;
	}

	@ManyToOne
	@JoinColumn(name = "objective_type_code", referencedColumnName = "code")
	public ObjectiveType getObjectiveType() {
		return objectiveType;
	}

	public void setObjectiveType(ObjectiveType objectiveType) {
		this.objectiveType = objectiveType;
	}

	public String getObjective() {
		return objective;
	}

	@Column(name = "objective", length = 100)
	public void setObjective(String objective) {
		this.objective = objective;
	}

	public UserGroupDTO newDTO() {
		UserGroupDTO dto = new UserGroupDTO();
		BeanUtilities.copyProperties(dto, this);
		dto.setUserGroupId(getId());
		if (getIndustry() != null) {
			dto.setIndustryId(getIndustry().getId());
		}
		return dto;
	}

	@Column(name = "payment_terms_required")
	public boolean isPaymentTermsRequired() {
		return paymentTermsRequired;
	}

	public void setPaymentTermsRequired(boolean paymentTermsRequired) {
		this.paymentTermsRequired = paymentTermsRequired;
	}

	@Column(name = "searchable", nullable = false)
	public boolean isSearchable() {
		return searchable;
	}

	public void setSearchable(boolean searchable) {
		this.searchable = searchable;
	}

	@Column(name = "public", nullable = false)
	public boolean isPublic() {
		return isPublic;
	}

	public void setPublic(boolean isPublic) {
		this.isPublic = isPublic;
	}

	@ManyToOne
	@JoinColumn(name = "company_id")
	public Company getCompany() {
		return company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@Transient
	public static UserGroupDTO newUserGroupDTO(UserGroup userGroup) {
		UserGroupDTO userGroupDTO = new UserGroupDTO();

		BeanUtilities.copyProperties(userGroupDTO, userGroup);
		return userGroupDTO;
	}

	@Override
	@Transient
	public Collection<RequirementSet> getRequirementSetCollection() {
		RequirementSet requirementSet = getRequirementSet();
		return requirementSet == null ? Collections.<RequirementSet>emptyList() : Arrays.asList(requirementSet);
	}

	@Override
	@Transient
	public TimeZone getRequirementSetableTimeZone() {
		return null;
	}

	@OneToOne
	@JoinTable(name = "user_group_requirement_set_association",
		joinColumns = @JoinColumn(name = "user_group_id"),
		inverseJoinColumns = @JoinColumn(name = "requirement_set_id")
	)
	public RequirementSet getRequirementSet() {
		return requirementSet;
	}

	public void setRequirementSet(RequirementSet requirementSet) {
		this.requirementSet = requirementSet;
	}

	@Column(name = "uuid")
	public String getUuid() {
		return uuid;
	}

	public void setUuid(final String uuid) {
		this.uuid = uuid;
	}

}
