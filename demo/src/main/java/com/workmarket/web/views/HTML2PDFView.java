package com.workmarket.web.views;

import com.workmarket.common.template.pdf.PDFTemplate;
import com.workmarket.utility.PDFUtilities;
import com.workmarket.utility.StringUtilities;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.servlet.support.JstlUtils;
import org.springframework.web.servlet.support.RequestContext;
import org.springframework.web.servlet.support.RequestContextUtils;
import org.springframework.web.servlet.view.InternalResourceView;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.util.Map;

/**
 * View that renders a PDF from HTML generated by a JSP view.
 * Uses a {@link HttpServletResponseWrapper} to make an internal request to generate HTML
 * from a JSP. Uses iText's {@link PdfWriter} to render a PDF from the resultant HTML.
 * <p/>
 * Exposes a <code>baseUri</code> model attribute for resolving root-relative URIs
 * embedded in the PDF.
 *
 * @see http://demo.itextsupport.com/xmlworker/itextdoc/flatsite.html
 * @see http://www.mail-archive.com/itext-questions@lists.sourceforge.net/msg60621.html
 */
public class HTML2PDFView extends InternalResourceView {

	private final static String PREFIX = "/WEB-INF/views";
	private final static String SUFFIX = ".jsp";

	private final String filename;
	private String html;

	public HTML2PDFView(String url) {
		this(url, null);
	}

	public HTML2PDFView(String url, String filename) {
		super(String.format("%s/%s%s", PREFIX, url, SUFFIX));
		this.filename = filename;
	}

	@Override
	public String getContentType() {
		return "application/pdf";
	}

	public String renderToFile(Map<String, Object> model, HttpServletRequest request) throws Exception {
		MockHttpServletResponse wrappedResponse = new MockHttpServletResponse();
		renderMergedOutputModel(model, request, wrappedResponse);

		// TODO Audit what happens with the temp file. Do we have to cleanup?

		File file = File.createTempFile("invoice", ".pdf");
		FileUtils.writeByteArrayToFile(file, wrappedResponse.getContentAsByteArray());
		return file.getAbsolutePath();
	}

	@Override
	protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if (StringUtils.isBlank(html)) {
			html = getResponseAsString(model, request);
		}
		html = StringUtilities.removeControlCharsIfAny(html);
		ByteArrayOutputStream baos = createTemporaryOutputStream();

		PDFUtilities.createFromHtml(html, baos);

		response.setContentType(getContentType());
		if (filename != null) {
			response.setHeader("Content-Disposition", String.format("attachment; filename=%s", filename));
		}

		writeToResponse(response, baos);
	}

	public String getResponseAsString(Map<String, Object> model, HttpServletRequest request) throws Exception {
		if (model != null) {
			updateModelAttributes(model, request);
			exposeModelAsRequestAttributes(model, request);
		}

		JstlUtils.exposeLocalizationContext(new RequestContext(request));

		MockHttpServletResponse wrappedResponse = new MockHttpServletResponse();
		wrappedResponse.setCharacterEncoding("utf-8");
		String dispatcherPath = prepareForRendering(request, wrappedResponse);

		ServletContext servletContext = RequestContextUtils.getWebApplicationContext(request).getServletContext();

		RequestDispatcher dispatcher = servletContext.getRequestDispatcher(dispatcherPath);
		dispatcher.include(request, wrappedResponse);

		return wrappedResponse.getContentAsString();
	}

	private void updateModelAttributes(Map<String, Object> model, HttpServletRequest request) {
		model.put("baseUri", String.format(
			"%s://%s:%s",
			request.getScheme(),
			request.getServerName(),
			request.getServerPort()
		));
	}

	public String getHtml() {
		return html;
	}

	public void setHtml(String html) {
		this.html = html;
	}
}
